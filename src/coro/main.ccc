#include "async_task.h"
#include <unordered_map>
#include <deque>
#include <iostream>
#include "event.h"
#include <memory>

template <typename Key, typename Result> struct AsyncEvents {
    struct Task {
        Event *mEvent;
        Result *mResult;
    };

    std::unordered_map<Key, Task> mTasks;
    AsyncTask<Result> Register(const Key &key) {
        Event event;

        Result result;
        mTasks[key] = {&event, &result};

        co_await event.wait();

        co_return std::move(result);
    }

    bool OnEvent(const Key &key, const Result &result) {
        auto it = mTasks.find(key);
        if (it != mTasks.end()) {
            *(it->second.mResult) = result;
            it->second.mEvent->fire();
            mTasks.erase(it);
            return true;
        }
        return false;
    }
};

struct IConnectionHandler {
    virtual void OnMessage(char *data) = 0;
    virtual ~IConnectionHandler() = default;
};

struct MyConnection : IConnectionHandler {

    AsyncEvents<size_t, char *> mRequests;

    AsyncTask<char *> SendMessage(char *data) {
        // send a message
        static size_t id = 0;
        id++;

        return mRequests.Register(id);
    }

    void OnMessage(char *data) {
        // deserialze id
        size_t id = 1;
        if (!mRequests.OnEvent(id, data)) {
            // dropped event :(
        }
    }
};

struct MyNum {
    int n = 5;
    ~MyNum() {
        //
        int w = 0;
    }
};

AsyncTask<std::unique_ptr<MyNum>> GetNumber() {
    auto a = std::make_unique<MyNum>();
    co_return a;
}

AsyncTask<> requester(MyConnection &connection) {
    // auto reply = co_await connection.SendMessage((char *)"hello world");
    // std::cout << reply << std::endl;
    auto task = GetNumber();

    std::cout << (co_await task)->n << std::endl;
}

void main() {
    MyConnection connection;
    requester(connection).RunDetached();
    connection.OnMessage((char *)"hi there :)");
}
